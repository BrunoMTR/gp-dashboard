/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as WorkflowRouteImport } from './routes/workflow'
import { Route as ProcessesRouteImport } from './routes/processes'
import { Route as NewWorkflowRouteImport } from './routes/new-workflow'
import { Route as AboutRouteImport } from './routes/about'
import { Route as DocumentationRouteImport } from './routes/Documentation'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DocumentationProcessIdRouteImport } from './routes/Documentation/$processId'

const WorkflowRoute = WorkflowRouteImport.update({
  id: '/workflow',
  path: '/workflow',
  getParentRoute: () => rootRouteImport,
} as any)
const ProcessesRoute = ProcessesRouteImport.update({
  id: '/processes',
  path: '/processes',
  getParentRoute: () => rootRouteImport,
} as any)
const NewWorkflowRoute = NewWorkflowRouteImport.update({
  id: '/new-workflow',
  path: '/new-workflow',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const DocumentationRoute = DocumentationRouteImport.update({
  id: '/Documentation',
  path: '/Documentation',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DocumentationProcessIdRoute = DocumentationProcessIdRouteImport.update({
  id: '/$processId',
  path: '/$processId',
  getParentRoute: () => DocumentationRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/Documentation': typeof DocumentationRouteWithChildren
  '/about': typeof AboutRoute
  '/new-workflow': typeof NewWorkflowRoute
  '/processes': typeof ProcessesRoute
  '/workflow': typeof WorkflowRoute
  '/Documentation/$processId': typeof DocumentationProcessIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/Documentation': typeof DocumentationRouteWithChildren
  '/about': typeof AboutRoute
  '/new-workflow': typeof NewWorkflowRoute
  '/processes': typeof ProcessesRoute
  '/workflow': typeof WorkflowRoute
  '/Documentation/$processId': typeof DocumentationProcessIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/Documentation': typeof DocumentationRouteWithChildren
  '/about': typeof AboutRoute
  '/new-workflow': typeof NewWorkflowRoute
  '/processes': typeof ProcessesRoute
  '/workflow': typeof WorkflowRoute
  '/Documentation/$processId': typeof DocumentationProcessIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/Documentation'
    | '/about'
    | '/new-workflow'
    | '/processes'
    | '/workflow'
    | '/Documentation/$processId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/Documentation'
    | '/about'
    | '/new-workflow'
    | '/processes'
    | '/workflow'
    | '/Documentation/$processId'
  id:
    | '__root__'
    | '/'
    | '/Documentation'
    | '/about'
    | '/new-workflow'
    | '/processes'
    | '/workflow'
    | '/Documentation/$processId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DocumentationRoute: typeof DocumentationRouteWithChildren
  AboutRoute: typeof AboutRoute
  NewWorkflowRoute: typeof NewWorkflowRoute
  ProcessesRoute: typeof ProcessesRoute
  WorkflowRoute: typeof WorkflowRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/workflow': {
      id: '/workflow'
      path: '/workflow'
      fullPath: '/workflow'
      preLoaderRoute: typeof WorkflowRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/processes': {
      id: '/processes'
      path: '/processes'
      fullPath: '/processes'
      preLoaderRoute: typeof ProcessesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/new-workflow': {
      id: '/new-workflow'
      path: '/new-workflow'
      fullPath: '/new-workflow'
      preLoaderRoute: typeof NewWorkflowRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/Documentation': {
      id: '/Documentation'
      path: '/Documentation'
      fullPath: '/Documentation'
      preLoaderRoute: typeof DocumentationRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/Documentation/$processId': {
      id: '/Documentation/$processId'
      path: '/$processId'
      fullPath: '/Documentation/$processId'
      preLoaderRoute: typeof DocumentationProcessIdRouteImport
      parentRoute: typeof DocumentationRoute
    }
  }
}

interface DocumentationRouteChildren {
  DocumentationProcessIdRoute: typeof DocumentationProcessIdRoute
}

const DocumentationRouteChildren: DocumentationRouteChildren = {
  DocumentationProcessIdRoute: DocumentationProcessIdRoute,
}

const DocumentationRouteWithChildren = DocumentationRoute._addFileChildren(
  DocumentationRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DocumentationRoute: DocumentationRouteWithChildren,
  AboutRoute: AboutRoute,
  NewWorkflowRoute: NewWorkflowRoute,
  ProcessesRoute: ProcessesRoute,
  WorkflowRoute: WorkflowRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
